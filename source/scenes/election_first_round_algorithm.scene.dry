title: Election First Round
on-arrival: {!
    // 1. Define seat profiles with demographic weights
    Q.seatProfiles = {
        'rural_stronghold': {
            weights: {
                rural: Math.min(100, Q.rural * 3.5),
                workers: Q.workers * 0.25,
                old_middle: Q.old_middle * 1.5,
                new_middle: Q.new_middle * 0.35,
                unemployed: Q.unemployed * 1.5
            },
            seats: 120
        },
        'urban_working': {
            weights: {
                workers: Q.workers * 1.8,
                unemployed: Q.unemployed * 3.5,
                new_middle: Q.new_middle * 0.15,
                old_middle: Q.old_middle * 0.05,
                rural: Q.rural * 0.05
            },
            seats: 150
        },
        'suburban_mixed': {
            weights: {
                new_middle: Q.new_middle * 3.0,
                old_middle: Q.old_middle * 2.5,
                workers: Q.workers * 0.5,
                unemployed: Q.unemployed * 0.3,
                rural: Q.rural * 0.3
            },
            seats: 120
        },
        'industrial': {
            weights: {
                workers: Q.workers * 1.5,
                unemployed: Q.unemployed * 3.0,
                new_middle: Q.new_middle * 0.7,
                old_middle: Q.old_middle * 0.3,
                rural: Q.rural * 0.1
            },
            seats: 210
        }
    };

    // 2. Normalize weights to 100
    for (var profileName in seatProfiles) {
        var profile = seatProfiles[profileName];
        var totalWeight = 0;
        for (var demo in profile.weights) {
            totalWeight += profile.weights[demo];
        }
        for (var demo in profile.weights) {
            profile.weights[demo] = (profile.weights[demo] / totalWeight) * 100;
        }
    }

    // 3. Initialize results
    var results = {};
    for (var i = 0; i < Q.parties.length; i++) {
        var party = Q.parties[i];
        results[party] = 0;
        Q[party + '_seats_first'] = 0;
    }

    var totalFirstRoundWins = 0;

    // 4. Seat allocation per profile
    for (var profileName in seatProfiles) {
        var profile = seatProfiles[profileName];
        var profileResults = {};
        for (var j = 0; j < Q.parties.length; j++) {
            profileResults[Q.parties[j]] = 0;
        }

        for (var j = 0; j < Q.parties.length; j++) {
            var party = Q.parties[j];
            var weightedSupport = 0;

            for (var demo in profile.weights) {
                var classSupport = Q[demo + '_' + party + '_normalized'] || 0;
                weightedSupport += (profile.weights[demo] / 100) * classSupport;
            }

            // Adjusted probabilities for more second-round action
            var winProbability;
            if (weightedSupport >= 45) winProbability = 0.35;
            else if (weightedSupport >= 35) winProbability = 0.25;
            else if (weightedSupport >= 25) winProbability = 0.10;
            else if (weightedSupport >= 15) winProbability = 0.03;
            else winProbability = 0.001;

            var exactSeats = profile.seats * winProbability;
            var roundedSeats = Math.floor(exactSeats);
            if (Math.random() < (exactSeats - roundedSeats)) roundedSeats += 1;

            profileResults[party] = roundedSeats;
            results[party] += roundedSeats;
            totalFirstRoundWins += roundedSeats;
        }

        // Save per-profile results
        Q['first_round_profile_' + profileName] = profileResults;
    }

    // 5. Clamp to 600 seats max
    if (totalFirstRoundWins > 600) {
        var adjustment = totalFirstRoundWins - 600;
        var largestParty = Q.parties[0];
        for (var j = 1; j < Q.parties.length; j++) {
            if (results[Q.parties[j]] > results[largestParty]) {
                largestParty = Q.parties[j];
            }
        }
        results[largestParty] -= adjustment;
        totalFirstRoundWins = 600;
    }

    // 6. Store final results
    for (var j = 0; j < Q.parties.length; j++) {
        var party = Q.parties[j];
        Q[party + '_seats_first'] = results[party];
    }

    // 7. Assign readable text for summary
    Q.seats_decided_first_round = totalFirstRoundWins;
    Q.seats_to_second_round = 600 - totalFirstRoundWins;
!}
go-to: election_first_round.post_first_round_results
