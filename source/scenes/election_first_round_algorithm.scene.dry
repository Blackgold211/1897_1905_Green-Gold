title: Election Second Round
on-arrival: {!
// Calculate remaining seats to allocate
var total_remaining = 600 - (Q.seats_decided_first_round || 0);

// Initialize second round seats
var second_round_seats = {};
for (var party of Q.parties) {
    second_round_seats[party] = 0;
}

// Process each seat profile
for (var profileName in seatProfiles) {
    var profile = seatProfiles[profileName];
    
    // Calculate seats already won in first round for this profile
    var profile_first_round = Math.round((profile.seats / 600) * (Q.seats_decided_first_round || 0));
    var seats_remaining = profile.seats - profile_first_round;
    
    if (seats_remaining <= 0) continue;
    
    // Calculate party strengths
    var strengths = {};
    for (var party of Q.parties) {
        var weighted = 0;
        for (var demo in profile.weights) {
            weighted += (profile.weights[demo]/100) * (Q[demo+'_'+party+'_normalized'] || 0);
        }
        strengths[party] = weighted;
    }
    
    // Allocate remaining seats using D'Hondt method
    for (var i = 0; i < seats_remaining; i++) {
        var max_score = 0;
        var winner = null;
        
        for (var party of Q.parties) {
            var score = strengths[party] / ((second_round_seats[party] || 0) + 1);
            if (score > max_score) {
                max_score = score;
                winner = party;
            }
        }
        
        if (winner) {
            second_round_seats[winner]++;
        }
    }
}

// Verify totals
var total_allocated = Q.seats_decided_first_round || 0;
for (var party in second_round_seats) {
    total_allocated += second_round_seats[party];
}

// Handle any rounding errors by adjusting largest party
if (total_allocated != 600) {
    var diff = 600 - total_allocated;
    var largest = Q.parties[0];
    for (var party of Q.parties) {
        if ((second_round_seats[party] || 0) > (second_round_seats[largest] || 0)) {
            largest = party;
        }
    }
    second_round_seats[largest] += diff;
}

// Set final results
for (var party of Q.parties) {
    Q[party+'_f'] = (Q[party+'_seats_first'] || 0) + (second_round_seats[party] || 0);
    Q[party+'_votes'] = Q[party+'_f'];
}
!}