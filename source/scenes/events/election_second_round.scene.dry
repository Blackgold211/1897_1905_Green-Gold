title: Folkshus Elections - Second Round
new-page: true
tags: event
priority: -1
view-if:(first_round_complete = 1)
on-departure: month_actions += 1; in_election = 0; next_election_year = next_election_year + 5; n_elections += 1; next_election_time = time + 60; richmondson_chancellor_timer = 5;
set-jump: post_second_round_results
face-image: img/Rothe_Wahlen_1903.jpg

# the low priority means that this event is only seen after all other events are resolved for the month.

= Elections, [+ month : month +] [+ year +]

The Folkshus elections are to be held now.

- @election_second_round_algorithm: May we do our best...

#@zelda_cancel_elections
#on-departure: next_election_year = next_election_year + 1; next_election_time = time + 12; pro_republic -= 10; prog_relation -= 8; rust_relation -= 8; pat_relation -= 10; socs_relation -= 8; coup_progress += 2; workers_pop -= 4; new_middle_pop -= 5; old_middle_pop -= 5; rural_pop -= 5; unemployed_pop -= 5; coup_progress += 2 if stats_normalized >= 0.3; coup_progress += 2 if stats_normalized + rust_normalized >= 0.5; ffb_strength += 100 if coup_progress >= 7; vs_strength += 100 if coup_progress >= 7

@post_second_round_results
on-arrival: {! 
var new_party_sum = 0;
for (var party of Q.parties) {
    Q['old_' + party + '_f'] = Q[party + '_f'];  // keep old seat count for reference
    
    if (Q.constitutional_reform > 0) {
        if ((Q.electoral_threshold > 1 && party == 'other') || Q[party + '_banned']) {
            Q[party + '_f'] = 0;
        } else {
            Q[party + '_f'] = Q[party + '_votes'];  // _votes now contains seat counts
        }
        new_party_sum += Q[party + '_f'];
    } else {
        Q[party + '_f'] = Q[party + '_votes'];  // _votes now contains seat counts
    }
    
    if (Q.use_decimals) {
        Q[party + '_f_disp'] = Q[party+'_f'].toFixed(1);
    } else {
        Q[party + '_f_disp'] = Q[party+'_f'];
    }
    
    // Since *_f now contains seat counts, we can use them directly
    Q[party + '_seats'] = Q[party + '_f'];

    // Calculate change in seats from old seats
    if (Q['old_' + party + '_f'] !== undefined) {
        Q['change_' + party + '_seats'] = Q[party + '_seats'] - Q['old_' + party + '_f'];
    } else {
        Q['change_' + party + '_seats'] = 0; // no old data
    }

    var sign = Q['change_' + party + '_seats'] > 0 ? '+' : '';
    Q['str_change_' + party + '_seats'] = sign + Q['change_' + party + '_seats'];
}

// Calculate coalition percentages based on seat counts out of 600
Q.left_coalition = ((Q.socs_f + Q.pop_f) / 600) * 100;
Q.populist_right_coalition = ((Q.pop_f + Q.rust_f) / 600) * 100;
Q.progressive_coalition = ((Q.prog_f + Q.rust_f) / 600) * 100;
Q.conservative_coalition = ((Q.pat_f + Q.rust_f) / 600) * 100;
Q.authoritarian_coalition = ((Q.pat_f + Q.rust_f + Q.stats_f) / 600) * 100;
Q.broad_center_right_coalition = ((Q.prog_f + Q.pat_f + Q.rust_f + Q.stats_f) / 600) * 100;
Q.grand_coalition = ((Q.pop_f + Q.socs_f + Q.prog_f + Q.pat_f + Q.rust_f + Q.stats_f + Q.other_f) / 600) * 100;

// Other coalitions
Q.left_centre_coalition = ((Q.pop_f + Q.prog_f) / 600) * 100;
Q.broad_left_centre_coalition = ((Q.pop_f + Q.prog_f + Q.rust_f) / 600) * 100;
Q.center_coalition = ((Q.prog_f + Q.pat_f) / 600) * 100;
Q.centre_right_coalition = ((Q.prog_f + Q.pat_f + Q.rust_f) / 600) * 100;

Q.leverage = (Q.pop_f / 600) * 100;

// Reset government variables
Q.grand_coalition_failed = 0;
Q.coalition_dissent = 0;
Q.socs_coalition_dissent = 0;
Q.pop_in_government = 0;
Q.in_populist_coalition = 0;
Q.in_grand_coalition = 0;
Q.in_left_front = 0;
Q.in_popular_front = 0;
Q.in_emergency_government = 0;
Q.in_minority_government = 0;
Q.in_unity_government = 0;
Q.pop_toleration = 0;
Q.pop_caretaker = 0;
Q.foreign_minister_party = 'RUST';
Q.interior_minister_party = 'PROG';
Q.justice_minister_party = 'PAT';
Q.labor_minister_party = 'PROG';
Q.defense_minister_party = 'PAT';
Q.economic_minister_party = 'PAT';
Q.finance_minister_party = 'RUST';
Q.agriculture_minister_party = 'PROG';

Q.strike_term_seen = 0;

var election_result = {'date': new Date(Q.year, Q.month - 1)};
for (var party of Q.parties) {  
    election_result[party] = Q[party + '_f'];  // Now storing seat counts
}
Q.election_records.push(election_result);
Q.first_round_complete = 0;
!}
on-departure:
on-display: {!
data = [
    {
        "id": "socs",
        "legend": "Socialist Workers", 
        "name": "Socialist Workers",
        "seats": Q.socs_f,
        "color": "#F37934"
    },
    {
        "id": "pop",
        "legend": "Populists",
        "name": "Populists", 
        "seats": Q.pop_f,
        "color": "#9365B8"
    },
    {
        "id": "prog",
        "legend": "Progress",
        "name": "Progress",
        "seats": Q.prog_f,
        "color": "#2969B0"
    },
    {
        "id": "rust", 
        "legend": "Rustiks",
        "name": "Rustiks",
        "seats": Q.rust_f,
        "color": "#1ABC9C"
    },
    {
        "id": "other",
        "legend": "Others",
        "name": "Others", 
        "seats": Q.other_f,
        "color": "#a0a0a0"
    },
    {
        "id": "pat",
        "legend": "Paternalists",
        "name": "Paternalists",
        "seats": Q.pat_f,
        "color": "#B8312F"
    },
    {
        "id": "stats",
        "legend": "Statists", 
        "name": "Statists",
        "seats": Q.stats_f,
        "color": "#475577"
    }
];

if (window && d3) {
    var width = 500; 
    var height = 500;
    var screenWidth = document.getElementById('content').offsetWidth;
    if (screenWidth < width - 50) {
        width = screenWidth - 50; 
        height = width;
        document.getElementById("folkshus").style.height = screenWidth/2 + "px";
    } 

    var parliament = d3.parliament();
    parliament.width(width).innerRadiusCoef(0.4);
    parliament.enter.fromCenter(true).smallToBig(true);
    parliament.exit.toCenter(false).bigToSmall(true);
    d3.select("#folkshus").datum(data).call(parliament);
}
!}
go-to: coalition_menu

= Election results

{!<svg id="folkshus" style="width: 500px; height: 250px;"> </svg>!}

<table>
  <tr><td>Party</td><td>Seats Won</td><td>Change</td></tr>!}

  <tr>
    <td><div class="box" style='background-color:#F37934'></div> Socialist Workers:</td>
    <td>[+ socs_seats +]</td>
    <td>[+ str_change_socs_seats +]</td>
  </tr>

  <tr>
    <td><div class="box" style='background-color:#9365B8; outline: 2px solid;'></div> <strong>Populists:</strong></td>
    <td><strong>[+ pop_seats +]</strong></td>
    <td><strong>[+ str_change_pop_seats +]</strong></td>
  </tr>

  <tr>
    <td><div class="box" style='background-color:#2969B0'></div> Progress:</td>
    <td>[+ prog_seats +]</td>
    <td>[+ str_change_prog_seats +]</td>
  </tr>

  <tr>
    <td><div class="box" style='background-color:#1ABC9C'></div> Rustiks:</td>
    <td>[+ rust_seats +]</td>
    <td>[+ str_change_rust_seats +]</td>
  </tr>

  <tr>
    <td><div class="box" style='background-color:#a0a0a0'></div> Others:</td>
    <td>[+ other_seats +]</td>
    <td>[+ str_change_other_seats +]</td>
  </tr>

  <tr>
    <td><div class="box" style='background-color:#B8312F'></div> Paternalists:</td>
    <td>[+ pat_seats +]</td>
    <td>[+ str_change_pat_seats +]</td>
  </tr>

  <tr>
    <td><div class="box" style='background-color:#475577'></div> Statists:</td>
    <td>[+ stats_seats +]</td>
    <td>[+ str_change_stats_seats +]</td>
  </tr>
</table>


**Potential coalitions:**

Left Coalition (POP + SOCS): [+ left_coalition +]%

Progressive Coalition (PROG + RUST): [+ progressive_coalition +]%

Conservative Coalition (PAT + RUST): [+ conservative_coalition +]%

Grand Coalition (All parties): [+ grand_coalition +]%

There are some potential coalition arrangements.

@coalition_menu

#- @pop_majority
#- @populist_coalition
#- @grand_coalition
#- @new_grand_coalition
#- @unity_government
#- @far_right_coalition
#- @no_majority
#- @left_coalition
#- @popular_front_coalition
#- @right_coalition